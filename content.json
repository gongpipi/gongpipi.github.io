{"meta":{"title":"Gongpipi's Blog","subtitle":"心之所向，素履所往","description":"初级程序员的一小步","author":"gongpipi","url":"https://gongpipi.github.io"},"pages":[{"title":"关于我","date":"2017-06-23T13:39:37.000Z","updated":"2017-08-20T06:54:43.855Z","comments":true,"path":"about/index.html","permalink":"https://gongpipi.github.io/about/index.html","excerpt":"","text":"毕业于河海大学 待人友好，沉溺于网络 喜欢跑步和读书 欢迎认识我！"},{"title":"Categories","date":"2017-08-04T07:46:47.631Z","updated":"2017-06-23T13:59:58.245Z","comments":true,"path":"categories/index.html","permalink":"https://gongpipi.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2017-06-23T13:39:37.000Z","updated":"2017-08-16T08:26:18.167Z","comments":true,"path":"resume/index.html","permalink":"https://gongpipi.github.io/resume/index.html","excerpt":"","text":"基本信息 姓名 宫少博 出生年月 1992.3 学历 本科 毕业院校 河海大学（2016.6毕业） 专业 计算机科学与技术 求职意向 java后台 期望薪资 10k-15K 联系方式 15261182360 邮箱 1446560082@qq.com 个人技能1.熟练掌握： java基础编程，数据库编程，熟练应用spring boot、struts2、mybatis框架，熟悉http协议。 熟练掌握html编程，熟练使用jquery，datatables，bootstrap，nicevalidate 等前端框架。 熟练使用 git，maven等工具 2.初识 云计算：vmvare虚拟化，熟悉vsphere sdk 。 熟悉linux系统，会装一些常用的软件如，tomcat，mysql等。 工作项目经历从2015年12月至2016年6月在无锡华云数据公司大数据产品线实习，为期六个月。2016年6月毕业后转到私有云部门做私有云项目开发，至今。期间开发参与开发了两个项目。 1.在线云服务商城项目 项目简介：云商城是采用微服务架构设计的在线云产品销售系统，为用户提供可靠的云计算环境，该系统包含产品服务、订单服务、用户服务、授权服务、消息推送等微服务，同时包含用户控制台和管理控制台两个web服务。 任务职责： 负责产品微服务的商品相关api开发，包括增删改查操作。 web管理控制台商品管理功能的开发，实现对商品信息的录入、修改等功能。商品的录入包含图片上传，富文本框录入等。 工作成果：完成项目产品服务相关api、web控制台相关功能的开发,支持与完成项目交付。 技术栈： spring boot ，spring mvc，持久层框架mybatis。 模板引擎Thymeleaf。 正则表达式。 前端框架、jquery、datatables、nicevalidate。 在线编辑富文本框 ueditor。 Git、maven等工具使用。 2. vmvare虚拟化私有云 项目简介：该项目是基于vmvare 虚拟化技术vsphere sdk 的二次开发，类似于vmvare vsphere web client 的管理平台。用于管理ESXI主机并操作其虚拟机、硬盘、网络等。项目包含两个子项目，一个是web管理控制台，另外一个是供管理控制台调用的api服务。 任务职责： 负责虚拟机开关机操作、云硬盘生命周期管理等功能相关的api设计及实现。 负责虚拟机和云硬盘web管理页面开发。 工作成果： 完成虚拟机创建、电源操作、迁移、克隆、远程控制等功能。完成云硬盘管理相关功能，比如创建、挂载、扩容、磁盘限速等功能。 工作期间带了个实习生，并指导其开发学习。 技术栈： 掌握restful api 设计，并使用raml构建api文档。 掌握vmvare 虚拟化技术 vsphere management sdk。 rabbitmq以及spring session 集成。 性格与爱好我这个人比较友好，乐于助人，对待好朋友尽心尽力。平时休闲的时候喜欢读点书籍，热爱生活，热爱运动。在业余时间多关注一些技术方面的资讯，增加自己的见识。"},{"title":"title","date":"2017-05-05T13:17:23.000Z","updated":"2017-05-05T13:17:23.584Z","comments":true,"path":"title/index.html","permalink":"https://gongpipi.github.io/title/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-08-04T07:50:33.362Z","updated":"2017-06-23T13:59:58.245Z","comments":true,"path":"tags/index.html","permalink":"https://gongpipi.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"面试总结","slug":"面试总结","date":"2017-08-16T08:13:05.000Z","updated":"2017-08-16T08:23:45.490Z","comments":true,"path":"2017/08/16/面试总结/","link":"","permalink":"https://gongpipi.github.io/2017/08/16/面试总结/","excerpt":"1. 线程和进程的区别进程：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动，是操作系统分配资源的基本单位，线程：是进程执行的基本单位，线程又叫轻进程，共享进程的资源，由操作系统调度通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。","text":"1. 线程和进程的区别进程：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动，是操作系统分配资源的基本单位，线程：是进程执行的基本单位，线程又叫轻进程，共享进程的资源，由操作系统调度通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。 2. post和put的区别 连接 https://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-26#section-4.3.4 The fundamental difference between the POST and PUT methods is highlighted by the different intent for the enclosed representation. The target resource in a POST request is intended to handle the enclosed representation according to the resource’s own semantics, whereas the enclosed representation in a PUT request is defined as replacing the state of the target resource. Hence, the intent of PUT is idempotent and visible to intermediaries, even though the exact effect is only known by the origin server. 所以，post和put的区别在于，post和put语义不同，post如何处理post的请求的表达已经包含在post的请求里；而put请求被定义去改变目标资源的状态，对于中间人是可见的，只有最终的存储资源的服务器知道变化。 另外，put主要用于推送资源到服务器。post用于提交数据到服务器，请求服务器处理（提交表单或者上传文件），如：像表单这样的这样的数据。对于一般的文件服务器，put方法向指定资源位置上传最新内容， 3. ioc和aop是什么，为什么要这么做 ioc 控制反转，现在都一般叫依赖注入（网友回答，所以依赖的对象不是自己new的,而是别人提供的,可以做到外部资源可切换），为什么要控制反转，将代码进行解耦，代码解耦的解决思想则是设计模式。控制反转的体现有1.将全局属性配置到外部文件中，spring可依据配置运行不同的代码，而程序不用做任何改动。2.改变变量的初始化方式get,set，3.软件演化有更好的灵活性，能快速响应需求变化，维护代价更小。 aop是切面编程，动态可插拔，比较好的应用例子就是日志、拦截器。 4. 同步和异步很明显，同步调用会等待方法的返回，异步调用会瞬间返回，但是异步调用瞬间返回并不代表你的任务就完成了，他会在后台起个线程继续进行任务 我的理解比如完成某个功能需要三步，这三步依次执行，每一步只能等前一步操作完成才能进行。网友解释当前执行需要上一步的结果输出作为结果异步与同步相对的，异步是不需要给下一步返回输出结果的，程序执行异步的时候可以继续执行下一步操作。 5. 并行和并发并发和并行在外在表象来说，是差不多的。由图所示，并行则是两个任务同时进行，而并发呢，则是一会做一个任务一会又切换做另一个任务。所以单个cpu是不能做并行的，只能是并发。 6. c10k问题7. 关于netty，netty是一个处理socket的框架，Netty是什么？ 本质：JBoss做的一个Jar包 目的：快速开发高性能、高可靠性的网络服务器和客户端程序 优点：提供异步的、事件驱动的网络应用程序框架和工具","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"https://gongpipi.github.io/tags/面试/"}]},{"title":"spring jpa 数据库连接及操作","slug":"spring-jpa-数据库连接及操作","date":"2017-08-16T08:11:36.000Z","updated":"2017-08-16T08:23:23.445Z","comments":true,"path":"2017/08/16/spring-jpa-数据库连接及操作/","link":"","permalink":"https://gongpipi.github.io/2017/08/16/spring-jpa-数据库连接及操作/","excerpt":"spring jpa 访问数据库配置例子官方链接https://spring.io/guides/gs/accessing-data-mysql/ 一、pom文件中加入jpa 和数据库连接包12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;","text":"spring jpa 访问数据库配置例子官方链接https://spring.io/guides/gs/accessing-data-mysql/ 一、pom文件中加入jpa 和数据库连接包12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 二、登录数据库创建一个数据库，spring_boot_test三、application.properties文件配置1234spring.jpa.hibernate.ddl-auto=createspring.datasource.url=jdbc:mysql://localhost:3306/spring_boot_testspring.datasource.username=rootspring.datasource.password=123456 关于spring.jpa.hibernate.ddl-auto设置为create则可以从model直接创建表。可选的参数有none, update, create, create-drop,这里就不做多的介绍了。 四、创建model类1234567891011121314151617181920212223242526272829303132333435@Entity // This tells Hibernate to make a table out of this classpublic class User &#123; @Id @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; private String name; private String email; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125;&#125; hibenate会根据这个类生成一个user表 五、创建仓库类123public interface UserRepository extends CrudRepository&lt;User, Long&gt; &#123;&#125; 仓库类提供了很多访问数据库的方法 六、创建controller类12345678910111213141516171819202122232425262728@Controller@RequestMapping(path=\"/user\")public class UserController &#123; @Autowired // This means to get the bean called userRepository // Which is auto-generated by Spring, we will use it to handle the data private UserRepository userRepository; @GetMapping(path=\"/add\") // Map ONLY GET Requests @ResponseBody public String addNewUser (@RequestParam String name , @RequestParam String email) &#123; // @ResponseBody means the returned String is the response, not a view name // @RequestParam means it is a parameter from the GET or POST request User n = new User(); n.setName(name); n.setEmail(email); userRepository.save(n); return \"Saved\"; &#125; @GetMapping(path=\"/all\") public @ResponseBody Iterable&lt;User&gt; getAllUsers() &#123; // This returns a JSON or XML with the users return userRepository.findAll(); &#125;&#125; 七、启动服务，在浏览器中测试创建添加和列举所有user的url1、http://localhost:8081/user/add?name=pipi&amp;email=114@qq.com，浏览器返回Saved，可以在数据库中看到多了一条记录 http://localhost:8081/user/all, 请求这个url,浏览器返回所有所有user的json数组 八、jpa原理jpa (Java Persistence API) 即java持久化api，通过java代码去管理关系数据库，jpa只是定义了一个api,具体的orm实现有很多厂商实现如：Hibernate，OpenJPA，toplink等","categories":[],"tags":[{"name":"spring-jpa","slug":"spring-jpa","permalink":"https://gongpipi.github.io/tags/spring-jpa/"}]},{"title":"restful api 理解","slug":"restful-api-理解","date":"2017-08-16T08:09:44.000Z","updated":"2017-08-16T08:23:29.092Z","comments":true,"path":"2017/08/16/restful-api-理解/","link":"","permalink":"https://gongpipi.github.io/2017/08/16/restful-api-理解/","excerpt":"1. restful的概念与理解restful全称为（Representational State Transfer）直译为“表述状态传输”，是一种api设计风格。我的理解，就是充分利用http的put/get/post/delete四个操作代表数据库的crud操作，将api服务以http的uri的形式提供出去。可作为webservice 的一种替代。","text":"1. restful的概念与理解restful全称为（Representational State Transfer）直译为“表述状态传输”，是一种api设计风格。我的理解，就是充分利用http的put/get/post/delete四个操作代表数据库的crud操作，将api服务以http的uri的形式提供出去。可作为webservice 的一种替代。 2. restful的优点 提供独立的api，以json数据传输，实现与语言无关的接口。这样软件的各个模块可以使用不同的语言开发。 http和json这种技术大家都很熟悉，便于开发。 可以利用缓存的提高服务的响应速度。3. restful api设计时应该注意的地方。 尽量让api 的url 看起来和http 的url一样。uri即代表了一个资源，所以url 中要用名词，避免使用在url中使用动词,而且名词代表了一个对象的集合所以要使用复数如,GET http://api.example.com/books。 访问一组数据中的某一个将id放在url上，如：http://api.example.com/books/6; DELETE http://api.example.com/books/9 http方法使用准确，只是获得数据用get, 提交数据到服务器处理用post, 新增或者更新一个url的内容则使用put请求。delete请求则用于删除一个资源。 版本控制，在域名后面紧跟版本，http://api.example.com/v1/books/6 状态码要正确。正确就返回200，未找到则返回400等。 最好做到Hypermedia Style(超媒体风格)，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。例如：123456&#123;\"link\": &#123; \"rel\": \"collection https://www.example.com/zoos\", \"href\": \"https://api.example.com/zoos\", \"title\": \"List of zoos\", \"type\": \"application/vnd.yourformat+json\"&#125;&#125;","categories":[],"tags":[{"name":"restful-api","slug":"restful-api","permalink":"https://gongpipi.github.io/tags/restful-api/"}]},{"title":"cookie 和 session","slug":"cookie-和-session","date":"2017-08-16T08:07:16.000Z","updated":"2017-08-16T08:23:42.434Z","comments":true,"path":"2017/08/16/cookie-和-session/","link":"","permalink":"https://gongpipi.github.io/2017/08/16/cookie-和-session/","excerpt":"一、关于cookie和session cookie 存在于浏览器端，是浏览器第一次向服务器发送请求时，由于服务器发现请求中没有带cookie参数，所以会在response的header部分添加一个set-cookie参数，浏览器根据header写入到文件中，以后每次请求都把cookie带上发送给服务器。服务器依据cookie得到服务器端保存的客户端信息。","text":"一、关于cookie和session cookie 存在于浏览器端，是浏览器第一次向服务器发送请求时，由于服务器发现请求中没有带cookie参数，所以会在response的header部分添加一个set-cookie参数，浏览器根据header写入到文件中，以后每次请求都把cookie带上发送给服务器。服务器依据cookie得到服务器端保存的客户端信息。 cookie的成分有 Set-Cookie属性 描述及实例 name=value 必须，如：Set-Cookie: foo=bar Expires 可选值，默认是浏览器关闭失效。过期时间，如 Set-Cookie: foo=bar; Expires=Wednesday, 09-Nov-99 23:12:40GMT Domain 可选，指定该cookie发送的域名。如果不指定则默认是产生Set-Cookie的响应服务器。例子, Set-Cookie: foo=bar; domain=”sample.com” Path 可选值，如果当前请求的url和cookie设置的path属性相同，则发送url时附带上cookie,”/“匹配所有的path. 例子,Set-Cookie: foo=bar; path=”/orders” Secure 可选。只有是安全连接的时候，请求才会附带cookie,例子，Set-Cookie: foo=bar; secure Session 是服务器端保存客户端信息的存储。因为http是无状态的，用户的每次请求都是无关联的。所以session 的出现使得服务器能够记录用户的信息。同样浏览器第一次请求服务器时服务器端会产生一个session，并将sessionid返回给浏览器存储到cookie里面，这样每次浏览器请求附带cookie,服务器通过sessionid 找到session 就可以得到当前请用的用户的信息。所以利用session可以实现权限的限制功能。","categories":[],"tags":[{"name":"cookie","slug":"cookie","permalink":"https://gongpipi.github.io/tags/cookie/"},{"name":"session","slug":"session","permalink":"https://gongpipi.github.io/tags/session/"}]},{"title":"windows 部署mysql 5.7.12","slug":"windows-部署mysql-5-7-12","date":"2017-07-15T04:12:33.000Z","updated":"2017-08-16T08:23:25.663Z","comments":true,"path":"2017/07/15/windows-部署mysql-5-7-12/","link":"","permalink":"https://gongpipi.github.io/2017/07/15/windows-部署mysql-5-7-12/","excerpt":"一、新装mysql(1). 官网下载mysql 安装包，下载链接https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.18-winx64.zip，下载后需要解压。(2). 复制默认配置文件my-default.ini，并命名为my.ini 使用记事本打开，修改如下配置1234567891011[mysqld]basedir = D:\\Program Files\\mysql-5.7.12-winx64 # 解压后mysql的路径datadir = D:\\Program Files\\mysql-5.7.12-winx64\\data # 数据目录#设置编码格式default-storage-engine=INNODBcharacter-set-server=utf8collation-server=utf8_general_ci[mysql]default-character-set=utf8","text":"一、新装mysql(1). 官网下载mysql 安装包，下载链接https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.18-winx64.zip，下载后需要解压。(2). 复制默认配置文件my-default.ini，并命名为my.ini 使用记事本打开，修改如下配置1234567891011[mysqld]basedir = D:\\Program Files\\mysql-5.7.12-winx64 # 解压后mysql的路径datadir = D:\\Program Files\\mysql-5.7.12-winx64\\data # 数据目录#设置编码格式default-storage-engine=INNODBcharacter-set-server=utf8collation-server=utf8_general_ci[mysql]default-character-set=utf8 (3). 打开windows控制台，cd到mysql的解压目录的bin目录下，如：12&gt;cd:&gt;cd D:\\Program Files\\mysql-5.7.12-winx64\\bin 当然也可以将 D:\\Program Files\\mysql-5.7.12-winx64\\bin加入到path环境变量里面，这样就不用每次都切换到mysql的安装目录了。运行指令，初始化mysqlmysqld --initialize-insecure --user=mysql(4). 安装mysql服务并启动mysqld -installnet start mysql(5). 启动成功后，需要修改初始密码，首次登陆时不用输入密码，直接回车即可进入mysql。如果启动失败，重新安装，重新安装的教程在后面。 无密码登录mysql -uroot -p 修改root用户密码mysql&gt;update mysql.user set authentication_string=password(&#39;root&#39;) where user=&#39;root&#39; and Host = &#39;localhost&#39;; 刷新权限mysql&gt;flush privileges; 退出mysqlmysql&gt;exit(6). 退出后即可使用root用户登录（密码为刚才修改的rootmysql -uroot -p二、重装mysql 首先删除data数据目录,如：D:\\Program Files\\mysql-5.7.12-winx64\\data 注销服务(注意切换到mysql安装的bin目录下)mysqld -remove3.初始化（换个cmd窗口）mysqld --initialize-insecure --user=mysql4.安装服务mysqld -install5.后面的修改密码的步骤和第一次安装一样。三、其他问题 使用其他客户端软件无法登陆 mysql; 12ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords. 解决方法：只需重新修改下密码即可，修改方式如下：以root权限登录mysql：（这里我的账户是root，密码也是root）mysql -uroot -proot然后更改密码：SET PASSWORD = PASSWORD(&#39;root&#39;); 内网其他主机不能连到mysql错误：1130 host’xxx’ is not allowed connect ...运行命令：mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;给某个人授权：mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.3&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION; mysql 设置时区set global time_zone = &#39;+8:00&#39;; 重置mysql登录密码I. 停止MYSQL服务，CMD打开DOS窗口，输入 net stop mysqlII. 在CMD命令行窗口，进入MYSQL安装目录III. 进入mysql安全模式，即当mysql起来后，不用输入密码就能进入数据库。 命令为：mysqld -nt --skip-grant-tablesIV. 重新打开一个CMD命令行窗口，输入mysql -uroot -p，使用空密码的方式登录MySQL（不用输入密码，直接按回车）V. 输入以下命令开始修改root用户的密码（注意：命令中mysql.user中间有个“点”）update mysql.user set authentication_string=password(&#39;root&#39;) where user=&#39;root&#39; and Host = &#39;localhost&#39;;VI. 刷新权限表 mysql&gt; flush privileges;VII. 退出 mysql&gt; quit 这样MYSQL超级管理员账号 ROOT已经重新设置好了，接下来 在任务管理器里结束掉 mysql-nt.exe 这个进程，重新启动MYSQL即可！（也可以直接重新启动服务器） MYSQL重新启动后，就可以用新设置的ROOT密码登陆MYSQL了！","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://gongpipi.github.io/tags/mysql/"}]},{"title":"hexo 指令","slug":"hexo-指令","date":"2017-06-23T13:42:50.000Z","updated":"2017-08-16T08:23:36.092Z","comments":true,"path":"2017/06/23/hexo-指令/","link":"","permalink":"https://gongpipi.github.io/2017/06/23/hexo-指令/","excerpt":"1.hexo 安装123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 2.新建文章及发布12345hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署","text":"1.hexo 安装123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 2.新建文章及发布12345hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 3. 写文章 在首页上之只显示文章的前一小部分，在文章详情显示所有， &lt;!--more--&gt;1234567891011title: spring-boot 配置spring-session-redis.mddate: 2017-06-11 21:52:09tags: [springboot,spring-session]或者tags:- hexo - markdowncategories:- hexobanner: /img/秘鲁.jpgthumbnail: /img/秘鲁.jpg","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://gongpipi.github.io/tags/hexo/"}]},{"title":"redis 操作","slug":"redis-操作","date":"2017-06-23T13:41:52.000Z","updated":"2017-08-16T08:23:30.495Z","comments":true,"path":"2017/06/23/redis-操作/","link":"","permalink":"https://gongpipi.github.io/2017/06/23/redis-操作/","excerpt":"","text":"1. redis 操作 连接redis redis-cli -h localhost -p 6379 登陆后输入密码 auth mypws 切换数据库 select 1 查看所有key keys * 清空当前数据库 flushdb 清空所有数据库 flushall","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"https://gongpipi.github.io/tags/redis/"}]},{"title":"spring-boot 配置spring-session-redis.md","slug":"spring-boot-配置spring-session-redis-md","date":"2017-06-11T13:52:09.000Z","updated":"2017-08-16T08:23:27.660Z","comments":true,"path":"2017/06/11/spring-boot-配置spring-session-redis-md/","link":"","permalink":"https://gongpipi.github.io/2017/06/11/spring-boot-配置spring-session-redis-md/","excerpt":"spring session 应用场景最近的项目中，因为有两个web项目，为了两个项目之间的session信息需要一致,并且实现单点登录，所以就用到了spring-sesssion。spring session 把session 信息放到了redis中，所以使用spring session 之前需要先安装redis.session存储到redis后，和平时一样，每个浏览器第一次请求的时候就会生成一个session，在各个服务之间共享。","text":"spring session 应用场景最近的项目中，因为有两个web项目，为了两个项目之间的session信息需要一致,并且实现单点登录，所以就用到了spring-sesssion。spring session 把session 信息放到了redis中，所以使用spring session 之前需要先安装redis.session存储到redis后，和平时一样，每个浏览器第一次请求的时候就会生成一个session，在各个服务之间共享。 另外还有一点，web端的sessionid 好像也是共享的 1. 使用spring sessionspring boot 使用 spring session 很简单，总共需要3步即可完成配置 在pom文件之配置依赖，版本继承spring-parent即可 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 在application.properties中添加相应的配置，在每个web app中都要配置 1234567# session 存储类型spring.session.store-type= redisspring.redis.database=1spring.redis.port=6379spring.redis.host=192.168.52.131# spring.redis.password=secret # 这里我的redis没有密码，所以我就没有配置 在spring-boot 启动类上加入注解@EnableRedisHttpSession，如： 12345678910111213@SpringBootApplication@EnableRedisHttpSessionpublic class JspTomcatEmbeApplication extends SpringBootServletInitializer &#123; @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123; return application.sources(JspTomcatEmbeApplication.class); &#125; public static void main(String[] args) &#123; SpringApplication.run(JspTomcatEmbeApplication.class, args); &#125;&#125; 2. 在controller中加入方法，验证session id是否一致代码：12345@GetMapping(\"/session\")@ResponseBodypublic String getSessionId(HttpSession session) &#123; return session.getId();&#125; 分别请求各个项目的地址http://localhost:8080/session 和 http://localhost:8081/session可以得到相同的 session id 如 9141de53-5de1-4c3c-a948-cd8b223836b2 3. spring-session 还可以存储到数据库中。具体可以参考官网的例子和文档 本例子项目地址 https://git.oschina.net/gongpipi/springbootdemo/tree/master/web-template 官网文档链接 http://docs.spring.io/spring-session/docs/2.0.0.BUILD-SNAPSHOT/reference/html5/#samples 例子github地址 https://github.com/spring-projects/spring-session/tree/master/samples","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://gongpipi.github.io/tags/springboot/"},{"name":"spring-session","slug":"spring-session","permalink":"https://gongpipi.github.io/tags/spring-session/"}]},{"title":"docker 基本操作指令","slug":"docker-基本操作指令","date":"2017-05-30T09:00:21.000Z","updated":"2017-08-16T08:23:40.505Z","comments":true,"path":"2017/05/30/docker-基本操作指令/","link":"","permalink":"https://gongpipi.github.io/2017/05/30/docker-基本操作指令/","excerpt":"安装docker yum install docker 启动服务 service docker start 推荐两个国内的docker镜像121.http://hub.daocloud.io/2.https://c.163.com/hub#/m/home/ docker 指令 拉取镜像docker pull redis 启动镜像docker run –name [name] -d [镜像id] -p [绑定到宿主机的端口]如 :docker run --name pipi-redis -d 0db2a690b89e -p 6379:6379docker run -d -p 6739:6739 0db2a690b89e","text":"安装docker yum install docker 启动服务 service docker start 推荐两个国内的docker镜像121.http://hub.daocloud.io/2.https://c.163.com/hub#/m/home/ docker 指令 拉取镜像docker pull redis 启动镜像docker run –name [name] -d [镜像id] -p [绑定到宿主机的端口]如 :docker run --name pipi-redis -d 0db2a690b89e -p 6379:6379docker run -d -p 6739:6739 0db2a690b89e 查看创建的容器如：docker ps -a 删除容器docker rm [容器id] 查看容器日志 ：docker logs [容器别名]如：docker logs pipi-redis 查看容器内部进程docker top [容器别名]如：docker top pipi-redis 获取容器更多的信息docker inspect [容器名]如：docker inspect pipi-redis 列举所有镜像如：docker images 查看对外端口docker port 如： docker port","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://gongpipi.github.io/tags/docker/"}]},{"title":"maven assembly打包","slug":"maven-assembly打包","date":"2017-05-29T14:40:54.000Z","updated":"2017-08-16T08:23:32.143Z","comments":true,"path":"2017/05/29/maven-assembly打包/","link":"","permalink":"https://gongpipi.github.io/2017/05/29/maven-assembly打包/","excerpt":"assembly是一个非常有用的maven打包工具，主要作用为，将一个项目的代码及其依赖、配置文件、文档打包为一个可分发的包中。在这里介绍一下assembly插件打包的使用。例子是一个spring boot + thymleaf的例子，使用idea开发。项目地址：http://git.oschina.net/gongpipi/springbootdemo 1. 使用assembly插件需要现在pom文件中配置一下，配置如下1234567891011121314151617181920212223242526272829&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;!--这个文件就是打包的描述文件，文件名随意--&gt; &lt;descriptor&gt;assembly.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt; &lt;archive&gt; &lt;manifest&gt; &lt;!--启动的主函数--&gt; &lt;mainClass&gt;com.sample.main&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;","text":"assembly是一个非常有用的maven打包工具，主要作用为，将一个项目的代码及其依赖、配置文件、文档打包为一个可分发的包中。在这里介绍一下assembly插件打包的使用。例子是一个spring boot + thymleaf的例子，使用idea开发。项目地址：http://git.oschina.net/gongpipi/springbootdemo 1. 使用assembly插件需要现在pom文件中配置一下，配置如下1234567891011121314151617181920212223242526272829&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;!--这个文件就是打包的描述文件，文件名随意--&gt; &lt;descriptor&gt;assembly.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt; &lt;archive&gt; &lt;manifest&gt; &lt;!--启动的主函数--&gt; &lt;mainClass&gt;com.sample.main&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 2.除了在项目的pom文件中配置assemble插件，还需要编写assmbly.xml，下面是一个简单的配置：123456789101112131415161718192021222324252627282930&lt;assembly xmlns=&quot;http://maven.apache.org/ASSEMBLY/2.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd&quot;&gt; &lt;id&gt;$&#123;project.artifactId&#125;&lt;/id&gt; &lt;!--打包格式 支持zip/tar/tar.gz/war/jar/dir--&gt; &lt;formats&gt; &lt;format&gt;tar.gz&lt;/format&gt; &lt;/formats&gt; &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt; &lt;!--包含文件集--&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;!--配置文件输出目录--&gt; &lt;outputDirectory&gt;/&lt;/outputDirectory&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;/fileSet&gt; &lt;/fileSets&gt; &lt;dependencySets&gt; &lt;!--打包的jar--&gt; &lt;dependencySet&gt; &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt; &lt;/dependencySet&gt; &lt;dependencySet&gt; &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt; &lt;scope&gt;system&lt;/scope&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt;&lt;/assembly&gt; 3.另外在这里再简单介绍下assembly.xml 文件的其他属性，具体属性的的可以参考官网的文档[http://maven.apache.org/components/plugins/maven-assembly-plugin/assembly.html]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176&lt;assembly xmlns=&quot;http://maven.apache.org/ASSEMBLY/2.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd&quot;&gt; &lt;id&gt;&lt;/id&gt; &lt;!--打包格式 支持zip/tar/tar.gz/war/jar/dir--&gt; &lt;formats&gt;&lt;/formats&gt; &lt;!--类型boolean 如果为false,则解压后所有文件在当前目录，否则创建一个与项目名相同的目录、所有文件都在这个目录下--&gt; &lt;includeBaseDirectory&gt;&lt;/includeBaseDirectory&gt; &lt;!--生成的打包文件所在的基本目录--&gt; &lt;baseDirectory&gt;&lt;/baseDirectory&gt; &lt;!--是否生成站点目录boolean,生成的名字由插件的siteDirectory 属性决定--&gt; &lt;includeSiteDirectory&gt;&lt;/includeSiteDirectory&gt; &lt;!--关于容器的暂时不用管--&gt; &lt;containerDescriptorHandlers&gt; &lt;containerDescriptorHandler&gt; &lt;handlerName/&gt; &lt;configuration/&gt; &lt;/containerDescriptorHandler&gt; &lt;/containerDescriptorHandlers&gt; &lt;!--包含的模块集--&gt; &lt;moduleSets&gt; &lt;moduleSet&gt; &lt;useAllReactorProjects/&gt; &lt;!--是否包含子模块、默认为true--&gt; &lt;includeSubModules/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;sources&gt; &lt;useDefaultExcludes/&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;useDefaultExcludes/&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;directory/&gt; &lt;lineEnding/&gt; &lt;filtered/&gt; &lt;/fileSet&gt; &lt;/fileSets&gt; &lt;includeModuleDirectory/&gt; &lt;excludeSubModuleDirectories/&gt; &lt;outputDirectoryMapping/&gt; &lt;/sources&gt; &lt;binaries&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;attachmentClassifier/&gt; &lt;includeDependencies/&gt; &lt;dependencySets&gt; &lt;dependencySet&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;useStrictFiltering/&gt; &lt;outputFileNameMapping/&gt; &lt;unpack/&gt; &lt;unpackOptions&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;filtered/&gt; &lt;lineEnding/&gt; &lt;useDefaultExcludes/&gt; &lt;encoding/&gt; &lt;/unpackOptions&gt; &lt;scope/&gt; &lt;useProjectArtifact/&gt; &lt;useProjectAttachments/&gt; &lt;useTransitiveDependencies/&gt; &lt;useTransitiveFiltering/&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt; &lt;unpack/&gt; &lt;unpackOptions&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;filtered/&gt; &lt;lineEnding/&gt; &lt;useDefaultExcludes/&gt; &lt;encoding/&gt; &lt;/unpackOptions&gt; &lt;outputFileNameMapping/&gt; &lt;/binaries&gt; &lt;/moduleSet&gt; &lt;/moduleSets&gt; &lt;!--包含文件集--&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;useDefaultExcludes/&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;directory/&gt; &lt;lineEnding/&gt; &lt;filtered/&gt; &lt;/fileSet&gt; &lt;/fileSets&gt; &lt;!--包含文件--&gt; &lt;files&gt; &lt;file&gt; &lt;source/&gt; &lt;outputDirectory/&gt; &lt;destName/&gt; &lt;fileMode/&gt; &lt;lineEnding/&gt; &lt;filtered/&gt; &lt;/file&gt; &lt;/files&gt; &lt;dependencySets&gt; &lt;dependencySet&gt; &lt;!--打包后依赖包存放的目录--&gt; &lt;outputDirectory&gt;&lt;/outputDirectory&gt; &lt;!--选择需要assembly的包，如果这个标签存在则执行，否则不执行--&gt; &lt;includes&gt;&lt;/includes&gt; &lt;!--选择需要排除的包，一般不用到这个标签，和includes一样存在才起作用--&gt; &lt;excludes&gt;&lt;/excludes&gt; &lt;!--文件操作权限，类似unix文件权限。默认为644--&gt; &lt;fileMode/&gt; &lt;!--同filemode--&gt; &lt;directoryMode/&gt; &lt;!----&gt; &lt;useStrictFiltering/&gt; &lt;!--文件名映射。或者说输出文件名格式--&gt; &lt;outputFileNameMapping/&gt; &lt;!--将依赖包解压到一个特定的文件、默认为false,直接copy--&gt; &lt;unpack&gt;false&lt;/unpack&gt; &lt;unpackOptions&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;filtered/&gt; &lt;lineEnding/&gt; &lt;useDefaultExcludes/&gt; &lt;encoding/&gt; &lt;/unpackOptions&gt; &lt;scope/&gt; &lt;useProjectArtifact/&gt; &lt;useProjectAttachments/&gt; &lt;useTransitiveDependencies/&gt; &lt;useTransitiveFiltering/&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt; &lt;!--maven库--&gt; &lt;repositories&gt; &lt;repository&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;includeMetadata/&gt; &lt;groupVersionAlignments&gt; &lt;groupVersionAlignment&gt; &lt;id/&gt; &lt;version/&gt; &lt;excludes/&gt; &lt;/groupVersionAlignment&gt; &lt;/groupVersionAlignments&gt; &lt;scope/&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;componentDescriptors/&gt;&lt;/assembly&gt; 4.之后打包代码，可以在target 目录下看到一个以tar.gz后缀名结尾的文件如：web-template-0.0.1-SNAPSHOT.tar.gz copy *.tar.gz文件到 linux服务器上，使用指令tar -zxvf web-template-0.0.1-SNAPSHOT.tar.gz 解压文件，可以得到配置文件，静态文件等12[root@pipi128 template]# lsapplication.properties bin console.log lib logback.xml sbin start.sh static target templates 打包后的所有jar 包都在lib目录下。在lib目录下找到web-template-0.0.1-SNAPSHOT.jar 文件，这个就是我们自己写的代码打成的包，这个包名和maven的pom文件中配置的是相同的。 使用java命令运行这个jar java -jar lib/web-template-0.0.1-SNAPSHOT.jar,就可以启动我们的web程序了。 另外需要注意的是:启动程序时需要在配置文件所在的目录启动，否则程序会找不到配置文件 5.linux相关脚本因为linux的脚本还不是特别熟，先记录下嘿嘿 查看程序运行的进程：ps -ef|grep web-template-0.0.1-SNAPSHOT.jar|grep -v grep|awk &#39;{print $2}&#39;6.关于maven pom.xml 的parent标签的理解parent 标签可以指定jar包的版本，子模块继承了父模块后，就可以在子模块中添加依赖时不用指定版本号，这样就保证了各个模块间使用的jar包一致。","categories":[],"tags":[{"name":"maven","slug":"maven","permalink":"https://gongpipi.github.io/tags/maven/"},{"name":"java","slug":"java","permalink":"https://gongpipi.github.io/tags/java/"}]},{"title":"markdown 语法熟悉","slug":"markdown 语法熟悉","date":"2017-05-05T13:16:39.000Z","updated":"2017-08-16T08:23:33.737Z","comments":true,"path":"2017/05/05/markdown 语法熟悉/","link":"","permalink":"https://gongpipi.github.io/2017/05/05/markdown 语法熟悉/","excerpt":"一.书写工具我使用的是有道云笔记的编辑工具，可以边写变看效果。蛮好用的。可以在有道云笔记官网下载 二.markdown语法1.标题(h)在行首添加1-6个#号，对应标题的1到6阶，如： #. 这是 ##. 这是 ######. 这是 同时数字越大，标题字越小，","text":"一.书写工具我使用的是有道云笔记的编辑工具，可以边写变看效果。蛮好用的。可以在有道云笔记官网下载 二.markdown语法1.标题(h)在行首添加1-6个#号，对应标题的1到6阶，如： #. 这是 ##. 这是 ######. 这是 同时数字越大，标题字越小， 2.区块引用(blockquote)“&gt;” 表示块引用，类似邮件中引言，邮件中的引言是啥我也不懂..，另外在区块引用中其他的markdown语法也是可以使用的。效果如下： 区块引用1区块引用2 3.列表(li)无序列表可以使用 “*”、“+”、“-” 三种标签 red green blue 4.有序列表使用数字后面跟一个点，别忘了空格 red green blue 5.代码区块，顾名思义，代码区块就是为代码而准备的(code)，他可以保持代码的结构，语法很简单:使用三个点`(英文tab上面那个键) 将代码包起来,在三点后面指定代码类型。 1234如```java while(true)&#123; ...&#125; 6.分割符号语法：”—“ 或者 “*“ ，当然我还是推荐三减，方便！ 7.链接（a） 行内链接语法 “[baidu](www.baidu.com)”效果 baidu 参考链接 语法 “[名词][id]“然后在文章的任意部分定义该链接即可如[1]: “http://example.com/“ 8 换行需要两个空格加回车换行成功 9.强调效果：很重要可以看到字变为了斜体语法是使用两个“_”或者两个“*”将强调的内容包围起来。 10.小段行内代码效果：print(hello,world)语法：使用“`”（tab上面那个键） 11.图片效果：语法和链接的语法相似，只不过多了一个“!” 12.反斜杠可以将markdown语法关键字打印出来 三.结束第一篇博客写完哈哈哈","categories":[{"name":"hexo","slug":"hexo","permalink":"https://gongpipi.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://gongpipi.github.io/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"https://gongpipi.github.io/tags/markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-05T13:00:08.532Z","updated":"2017-08-16T08:23:38.506Z","comments":true,"path":"2017/05/05/hello-world/","link":"","permalink":"https://gongpipi.github.io/2017/05/05/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}