{"meta":{"title":"Gongpipi's Blog","subtitle":"心之所向，素履所往","description":"初级程序员的一小步","author":"gongpipi","url":"https://gongpipi.github.io"},"pages":[{"title":"Categories","date":"2017-06-23T13:59:58.244Z","updated":"2017-06-23T13:59:58.244Z","comments":true,"path":"categories/index.html","permalink":"https://gongpipi.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2017-06-23T13:39:37.000Z","updated":"2017-06-24T11:38:15.893Z","comments":true,"path":"about/index.html","permalink":"https://gongpipi.github.io/about/index.html","excerpt":"","text":"基本信息 姓名 宫少博 出生年月 1992.3 学历 本科 毕业院校 河海大学（2016.6毕业） 专业 计算机科学与技术 求职意向 java后台 期望薪资 9k-11K 联系方式 15261182360 邮箱 1446560082@qq.com 个人技能1.熟练掌握： java基础编程，数据库编程，熟练应用spring boot、struts2、mybatis框架，熟悉http协议。 熟练掌握html编程，熟练使用jquery，datatables，bootstrap，nicevalidate 等前端框架。 熟练使用 git，maven等工具 2.初识 云计算：vmvare虚拟化，熟悉vsphere sdk 。 熟悉linux系统，会装一些常用的软件如，tomcat，mysql等。 工作项目经历从2015年12月至2016年6月在无锡华云数据公司大数据产品线实习，为期六个月。2016年6月毕业后转到私有云部门做私有云项目开发，至今。期间开发参与开发了两个项目。 1.在线云服务商城项目 项目简介：云商城是采用微服务架构设计的在线云产品销售系统，为用户提供可靠的云计算环境，该系统包含产品服务、订单服务、用户服务、授权服务、消息推送等微服务，同时包含用户控制台和管理控制台两个web服务。 任务职责： 负责产品微服务的商品相关api开发，包括增删改查操作。 web管理控制台商品管理功能的开发，实现对商品信息的录入、修改等功能。商品的录入包含图片上传，富文本框录入等。 工作成果：完成项目产品服务相关api、web控制台相关功能的开发,支持与完成项目交付。 技术栈： spring boot ，spring mvc，持久层框架mybatis。 模板引擎Thymeleaf。 正则表达式。 前端框架、jquery、datatables、nicevalidate。 在线编辑富文本框 ueditor。 Git、maven等工具使用。 2. vmvare虚拟化私有云 项目简介：该项目是基于vmvare 虚拟化技术vsphere sdk 的二次开发，类似于vmvare vsphere web client 的管理平台。用于管理ESXI主机并操作其虚拟机、硬盘、网络等。项目包含两个子项目，一个是web管理控制台，另外一个是供管理控制台调用的api服务。 任务职责： 负责虚拟机开关机操作、云硬盘生命周期管理等功能相关的api设计及实现。 负责虚拟机和云硬盘web管理页面开发。 工作成果： 完成虚拟机创建、电源操作、迁移、克隆、远程控制等功能。完成云硬盘管理相关功能，比如创建、挂载、扩容、磁盘限速等功能。 工作期间带了个实习生，并指导其开发学习。 技术栈： 掌握restful api 设计，并使用raml构建api文档。 掌握vmvare 虚拟化技术 vsphere management sdk。 rabbitmq以及spring session 集成。 性格与爱好我这个人比较友好，乐于助人，对待好朋友尽心尽力。平时休闲的时候喜欢读点书籍，热爱生活，热爱运动。在业余时间多关注一些技术方面的资讯，增加自己的见识。"},{"title":"Tags","date":"2017-06-23T13:59:58.245Z","updated":"2017-06-23T13:59:58.245Z","comments":true,"path":"tags/index.html","permalink":"https://gongpipi.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2017-06-23T13:39:37.000Z","updated":"2017-06-24T11:38:15.893Z","comments":true,"path":"resume/index.html","permalink":"https://gongpipi.github.io/resume/index.html","excerpt":"","text":"基本信息 姓名 宫少博 出生年月 1992.3 学历 本科 毕业院校 河海大学（2016.6毕业） 专业 计算机科学与技术 求职意向 java后台 期望薪资 9k-11K 联系方式 15261182360 邮箱 1446560082@qq.com 个人技能1.熟练掌握： java基础编程，数据库编程，熟练应用spring boot、struts2、mybatis框架，熟悉http协议。 熟练掌握html编程，熟练使用jquery，datatables，bootstrap，nicevalidate 等前端框架。 熟练使用 git，maven等工具 2.初识 云计算：vmvare虚拟化，熟悉vsphere sdk 。 熟悉linux系统，会装一些常用的软件如，tomcat，mysql等。 工作项目经历从2015年12月至2016年6月在无锡华云数据公司大数据产品线实习，为期六个月。2016年6月毕业后转到私有云部门做私有云项目开发，至今。期间开发参与开发了两个项目。 1.在线云服务商城项目 项目简介：云商城是采用微服务架构设计的在线云产品销售系统，为用户提供可靠的云计算环境，该系统包含产品服务、订单服务、用户服务、授权服务、消息推送等微服务，同时包含用户控制台和管理控制台两个web服务。 任务职责： 负责产品微服务的商品相关api开发，包括增删改查操作。 web管理控制台商品管理功能的开发，实现对商品信息的录入、修改等功能。商品的录入包含图片上传，富文本框录入等。 工作成果：完成项目产品服务相关api、web控制台相关功能的开发,支持与完成项目交付。 技术栈： spring boot ，spring mvc，持久层框架mybatis。 模板引擎Thymeleaf。 正则表达式。 前端框架、jquery、datatables、nicevalidate。 在线编辑富文本框 ueditor。 Git、maven等工具使用。 2. vmvare虚拟化私有云 项目简介：该项目是基于vmvare 虚拟化技术vsphere sdk 的二次开发，类似于vmvare vsphere web client 的管理平台。用于管理ESXI主机并操作其虚拟机、硬盘、网络等。项目包含两个子项目，一个是web管理控制台，另外一个是供管理控制台调用的api服务。 任务职责： 负责虚拟机开关机操作、云硬盘生命周期管理等功能相关的api设计及实现。 负责虚拟机和云硬盘web管理页面开发。 工作成果： 完成虚拟机创建、电源操作、迁移、克隆、远程控制等功能。完成云硬盘管理相关功能，比如创建、挂载、扩容、磁盘限速等功能。 工作期间带了个实习生，并指导其开发学习。 技术栈： 掌握restful api 设计，并使用raml构建api文档。 掌握vmvare 虚拟化技术 vsphere management sdk。 rabbitmq以及spring session 集成。 性格与爱好我这个人比较友好，乐于助人，对待好朋友尽心尽力。平时休闲的时候喜欢读点书籍，热爱生活，热爱运动。在业余时间多关注一些技术方面的资讯，增加自己的见识。"},{"title":"title","date":"2017-05-05T13:17:23.000Z","updated":"2017-05-05T13:17:23.583Z","comments":true,"path":"title/index.html","permalink":"https://gongpipi.github.io/title/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo 指令","slug":"hexo-指令","date":"2017-06-23T13:42:50.000Z","updated":"2017-06-24T12:44:54.755Z","comments":true,"path":"2017/06/23/hexo-指令/","link":"","permalink":"https://gongpipi.github.io/2017/06/23/hexo-指令/","excerpt":"1.hexo 安装123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 2.新建文章及发布12345hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署","text":"1.hexo 安装123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 2.新建文章及发布12345hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 3. 写文章 在首页上之只显示文章的前一小部分，在文章详情显示所有， &lt;!--more--&gt;1234567891011title: spring-boot 配置spring-session-redis.mddate: 2017-06-11 21:52:09tags: [springboot,spring-session]或者tags:- hexo - markdowncategories:- hexobanner: /img/秘鲁.jpgthumbnail: /img/秘鲁.jpg","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://gongpipi.github.io/tags/hexo/"}]},{"title":"redis 操作","slug":"redis-操作","date":"2017-06-23T13:41:52.000Z","updated":"2017-06-24T12:46:29.684Z","comments":true,"path":"2017/06/23/redis-操作/","link":"","permalink":"https://gongpipi.github.io/2017/06/23/redis-操作/","excerpt":"","text":"1. redis 操作 连接redis redis-cli -h localhost -p 6379 登陆后输入密码 auth mypws 切换数据库 select 1 查看所有key keys * 清空当前数据库 flushdb 清空所有数据库 flushall","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"https://gongpipi.github.io/tags/redis/"}]},{"title":"spring-boot 配置spring-session-redis.md","slug":"spring-boot-配置spring-session-redis-md","date":"2017-06-11T13:52:09.000Z","updated":"2017-06-24T12:47:08.685Z","comments":true,"path":"2017/06/11/spring-boot-配置spring-session-redis-md/","link":"","permalink":"https://gongpipi.github.io/2017/06/11/spring-boot-配置spring-session-redis-md/","excerpt":"spring session 应用场景最近的项目中，因为有两个web项目，为了两个项目之间的session信息需要一致,并且实现单点登录，所以就用到了spring-sesssion。spring session 把session 信息放到了redis中，所以使用spring session 之前需要先安装redis.session存储到redis后，和平时一样，每个浏览器第一次请求的时候就会生成一个session，在各个服务之间共享。","text":"spring session 应用场景最近的项目中，因为有两个web项目，为了两个项目之间的session信息需要一致,并且实现单点登录，所以就用到了spring-sesssion。spring session 把session 信息放到了redis中，所以使用spring session 之前需要先安装redis.session存储到redis后，和平时一样，每个浏览器第一次请求的时候就会生成一个session，在各个服务之间共享。另外还有一点，web端的sessionid 好像也是共享的 1. 使用spring sessionspring boot 使用 spring session 很简单，总共需要3步即可完成配置 在pom文件之配置依赖，版本继承spring-parent即可 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 在application.properties中添加相应的配置，在每个web app中都要配置 1234567# session 存储类型spring.session.store-type= redisspring.redis.database=1spring.redis.port=6379spring.redis.host=192.168.52.131# spring.redis.password=secret # 这里我的redis没有密码，所以我就没有配置 在spring-boot 启动类上加入注解@EnableRedisHttpSession，如： 12345678910111213@SpringBootApplication@EnableRedisHttpSessionpublic class JspTomcatEmbeApplication extends SpringBootServletInitializer &#123; @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123; return application.sources(JspTomcatEmbeApplication.class); &#125; public static void main(String[] args) &#123; SpringApplication.run(JspTomcatEmbeApplication.class, args); &#125;&#125; 2. 在controller中加入方法，验证session id是否一致代码：12345@GetMapping(\"/session\")@ResponseBodypublic String getSessionId(HttpSession session) &#123; return session.getId();&#125; 分别请求各个项目的地址http://localhost:8080/session 和 http://localhost:8081/session可以得到相同的 session id 如 9141de53-5de1-4c3c-a948-cd8b223836b2 3. spring-session 还可以存储到数据库中。具体可以参考官网的例子和文档 本例子项目地址 https://git.oschina.net/gongpipi/springbootdemo/tree/master/web-template 官网文档链接 http://docs.spring.io/spring-session/docs/2.0.0.BUILD-SNAPSHOT/reference/html5/#samples 例子github地址 https://github.com/spring-projects/spring-session/tree/master/samples","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://gongpipi.github.io/tags/springboot/"},{"name":"spring-session","slug":"spring-session","permalink":"https://gongpipi.github.io/tags/spring-session/"}]},{"title":"docker 基本操作指令","slug":"docker-基本操作指令","date":"2017-05-30T09:00:21.000Z","updated":"2017-06-24T12:51:25.148Z","comments":true,"path":"2017/05/30/docker-基本操作指令/","link":"","permalink":"https://gongpipi.github.io/2017/05/30/docker-基本操作指令/","excerpt":"安装docker yum install docker 启动服务 service docker start 推荐两个国内的docker镜像121.http://hub.daocloud.io/2.https://c.163.com/hub#/m/home/ docker 指令 拉取镜像docker pull redis 启动镜像docker run –name [name] -d [镜像id] -p [绑定到宿主机的端口]如 :docker run --name pipi-redis -d 0db2a690b89e -p 6379:6379docker run -d -p 6739:6739 0db2a690b89e","text":"安装docker yum install docker 启动服务 service docker start 推荐两个国内的docker镜像121.http://hub.daocloud.io/2.https://c.163.com/hub#/m/home/ docker 指令 拉取镜像docker pull redis 启动镜像docker run –name [name] -d [镜像id] -p [绑定到宿主机的端口]如 :docker run --name pipi-redis -d 0db2a690b89e -p 6379:6379docker run -d -p 6739:6739 0db2a690b89e 查看创建的容器如：docker ps -a 删除容器docker rm [容器id] 查看容器日志 ：docker logs [容器别名]如：docker logs pipi-redis 查看容器内部进程docker top [容器别名]如：docker top pipi-redis 获取容器更多的信息docker inspect [容器名]如：docker inspect pipi-redis 列举所有镜像如：docker images 查看对外端口docker port 如： docker port","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://gongpipi.github.io/tags/docker/"}]},{"title":"maven assembly打包","slug":"maven-assembly打包","date":"2017-05-29T14:40:54.000Z","updated":"2017-06-24T12:52:37.935Z","comments":true,"path":"2017/05/29/maven-assembly打包/","link":"","permalink":"https://gongpipi.github.io/2017/05/29/maven-assembly打包/","excerpt":"assembly是一个非常有用的maven打包工具，主要作用为，将一个项目的代码及其依赖、配置文件、文档打包为一个可分发的包中。在这里介绍一下assembly插件打包的使用。例子是一个spring boot + thymleaf的例子，使用idea开发。项目地址：http://git.oschina.net/gongpipi/springbootdemo 1. 使用assembly插件需要现在pom文件中配置一下，配置如下1234567891011121314151617181920212223242526272829&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;!--这个文件就是打包的描述文件，文件名随意--&gt; &lt;descriptor&gt;assembly.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt; &lt;archive&gt; &lt;manifest&gt; &lt;!--启动的主函数--&gt; &lt;mainClass&gt;com.sample.main&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;","text":"assembly是一个非常有用的maven打包工具，主要作用为，将一个项目的代码及其依赖、配置文件、文档打包为一个可分发的包中。在这里介绍一下assembly插件打包的使用。例子是一个spring boot + thymleaf的例子，使用idea开发。项目地址：http://git.oschina.net/gongpipi/springbootdemo 1. 使用assembly插件需要现在pom文件中配置一下，配置如下1234567891011121314151617181920212223242526272829&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;!--这个文件就是打包的描述文件，文件名随意--&gt; &lt;descriptor&gt;assembly.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt; &lt;archive&gt; &lt;manifest&gt; &lt;!--启动的主函数--&gt; &lt;mainClass&gt;com.sample.main&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 2.除了在项目的pom文件中配置assemble插件，还需要编写assmbly.xml，下面是一个简单的配置：123456789101112131415161718192021222324252627282930&lt;assembly xmlns=&quot;http://maven.apache.org/ASSEMBLY/2.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd&quot;&gt; &lt;id&gt;$&#123;project.artifactId&#125;&lt;/id&gt; &lt;!--打包格式 支持zip/tar/tar.gz/war/jar/dir--&gt; &lt;formats&gt; &lt;format&gt;tar.gz&lt;/format&gt; &lt;/formats&gt; &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt; &lt;!--包含文件集--&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;!--配置文件输出目录--&gt; &lt;outputDirectory&gt;/&lt;/outputDirectory&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;/fileSet&gt; &lt;/fileSets&gt; &lt;dependencySets&gt; &lt;!--打包的jar--&gt; &lt;dependencySet&gt; &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt; &lt;/dependencySet&gt; &lt;dependencySet&gt; &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt; &lt;scope&gt;system&lt;/scope&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt;&lt;/assembly&gt; 3.另外在这里再简单介绍下assembly.xml 文件的其他属性，具体属性的的可以参考官网的文档[http://maven.apache.org/components/plugins/maven-assembly-plugin/assembly.html]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176&lt;assembly xmlns=&quot;http://maven.apache.org/ASSEMBLY/2.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd&quot;&gt; &lt;id&gt;&lt;/id&gt; &lt;!--打包格式 支持zip/tar/tar.gz/war/jar/dir--&gt; &lt;formats&gt;&lt;/formats&gt; &lt;!--类型boolean 如果为false,则解压后所有文件在当前目录，否则创建一个与项目名相同的目录、所有文件都在这个目录下--&gt; &lt;includeBaseDirectory&gt;&lt;/includeBaseDirectory&gt; &lt;!--生成的打包文件所在的基本目录--&gt; &lt;baseDirectory&gt;&lt;/baseDirectory&gt; &lt;!--是否生成站点目录boolean,生成的名字由插件的siteDirectory 属性决定--&gt; &lt;includeSiteDirectory&gt;&lt;/includeSiteDirectory&gt; &lt;!--关于容器的暂时不用管--&gt; &lt;containerDescriptorHandlers&gt; &lt;containerDescriptorHandler&gt; &lt;handlerName/&gt; &lt;configuration/&gt; &lt;/containerDescriptorHandler&gt; &lt;/containerDescriptorHandlers&gt; &lt;!--包含的模块集--&gt; &lt;moduleSets&gt; &lt;moduleSet&gt; &lt;useAllReactorProjects/&gt; &lt;!--是否包含子模块、默认为true--&gt; &lt;includeSubModules/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;sources&gt; &lt;useDefaultExcludes/&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;useDefaultExcludes/&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;directory/&gt; &lt;lineEnding/&gt; &lt;filtered/&gt; &lt;/fileSet&gt; &lt;/fileSets&gt; &lt;includeModuleDirectory/&gt; &lt;excludeSubModuleDirectories/&gt; &lt;outputDirectoryMapping/&gt; &lt;/sources&gt; &lt;binaries&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;attachmentClassifier/&gt; &lt;includeDependencies/&gt; &lt;dependencySets&gt; &lt;dependencySet&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;useStrictFiltering/&gt; &lt;outputFileNameMapping/&gt; &lt;unpack/&gt; &lt;unpackOptions&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;filtered/&gt; &lt;lineEnding/&gt; &lt;useDefaultExcludes/&gt; &lt;encoding/&gt; &lt;/unpackOptions&gt; &lt;scope/&gt; &lt;useProjectArtifact/&gt; &lt;useProjectAttachments/&gt; &lt;useTransitiveDependencies/&gt; &lt;useTransitiveFiltering/&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt; &lt;unpack/&gt; &lt;unpackOptions&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;filtered/&gt; &lt;lineEnding/&gt; &lt;useDefaultExcludes/&gt; &lt;encoding/&gt; &lt;/unpackOptions&gt; &lt;outputFileNameMapping/&gt; &lt;/binaries&gt; &lt;/moduleSet&gt; &lt;/moduleSets&gt; &lt;!--包含文件集--&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;useDefaultExcludes/&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;directory/&gt; &lt;lineEnding/&gt; &lt;filtered/&gt; &lt;/fileSet&gt; &lt;/fileSets&gt; &lt;!--包含文件--&gt; &lt;files&gt; &lt;file&gt; &lt;source/&gt; &lt;outputDirectory/&gt; &lt;destName/&gt; &lt;fileMode/&gt; &lt;lineEnding/&gt; &lt;filtered/&gt; &lt;/file&gt; &lt;/files&gt; &lt;dependencySets&gt; &lt;dependencySet&gt; &lt;!--打包后依赖包存放的目录--&gt; &lt;outputDirectory&gt;&lt;/outputDirectory&gt; &lt;!--选择需要assembly的包，如果这个标签存在则执行，否则不执行--&gt; &lt;includes&gt;&lt;/includes&gt; &lt;!--选择需要排除的包，一般不用到这个标签，和includes一样存在才起作用--&gt; &lt;excludes&gt;&lt;/excludes&gt; &lt;!--文件操作权限，类似unix文件权限。默认为644--&gt; &lt;fileMode/&gt; &lt;!--同filemode--&gt; &lt;directoryMode/&gt; &lt;!----&gt; &lt;useStrictFiltering/&gt; &lt;!--文件名映射。或者说输出文件名格式--&gt; &lt;outputFileNameMapping/&gt; &lt;!--将依赖包解压到一个特定的文件、默认为false,直接copy--&gt; &lt;unpack&gt;false&lt;/unpack&gt; &lt;unpackOptions&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;filtered/&gt; &lt;lineEnding/&gt; &lt;useDefaultExcludes/&gt; &lt;encoding/&gt; &lt;/unpackOptions&gt; &lt;scope/&gt; &lt;useProjectArtifact/&gt; &lt;useProjectAttachments/&gt; &lt;useTransitiveDependencies/&gt; &lt;useTransitiveFiltering/&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt; &lt;!--maven库--&gt; &lt;repositories&gt; &lt;repository&gt; &lt;outputDirectory/&gt; &lt;includes/&gt; &lt;excludes/&gt; &lt;fileMode/&gt; &lt;directoryMode/&gt; &lt;includeMetadata/&gt; &lt;groupVersionAlignments&gt; &lt;groupVersionAlignment&gt; &lt;id/&gt; &lt;version/&gt; &lt;excludes/&gt; &lt;/groupVersionAlignment&gt; &lt;/groupVersionAlignments&gt; &lt;scope/&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;componentDescriptors/&gt;&lt;/assembly&gt; 4.之后打包代码，可以在target 目录下看到一个以tar.gz后缀名结尾的文件如：web-template-0.0.1-SNAPSHOT.tar.gz copy *.tar.gz文件到 linux服务器上，使用指令tar -zxvf web-template-0.0.1-SNAPSHOT.tar.gz 解压文件，可以得到配置文件，静态文件等12[root@pipi128 template]# lsapplication.properties bin console.log lib logback.xml sbin start.sh static target templates 打包后的所有jar 包都在lib目录下。在lib目录下找到web-template-0.0.1-SNAPSHOT.jar 文件，这个就是我们自己写的代码打成的包，这个包名和maven的pom文件中配置的是相同的。 使用java命令运行这个jar java -jar lib/web-template-0.0.1-SNAPSHOT.jar,就可以启动我们的web程序了。 另外需要注意的是:启动程序时需要在配置文件所在的目录启动，否则程序会找不到配置文件 5.linux相关脚本因为linux的脚本还不是特别熟，先记录下嘿嘿 查看程序运行的进程：ps -ef|grep web-template-0.0.1-SNAPSHOT.jar|grep -v grep|awk &#39;{print $2}&#39;6.关于maven pom.xml 的parent标签的理解parent 标签可以指定jar包的版本，子模块继承了父模块后，就可以在子模块中添加依赖时不用指定版本号，这样就保证了各个模块间使用的jar包一致。","categories":[],"tags":[{"name":"maven","slug":"maven","permalink":"https://gongpipi.github.io/tags/maven/"},{"name":"java","slug":"java","permalink":"https://gongpipi.github.io/tags/java/"}]},{"title":"markdown 语法熟悉","slug":"markdown 语法熟悉","date":"2017-05-05T13:16:39.000Z","updated":"2017-06-24T12:52:10.055Z","comments":true,"path":"2017/05/05/markdown 语法熟悉/","link":"","permalink":"https://gongpipi.github.io/2017/05/05/markdown 语法熟悉/","excerpt":"一.书写工具我使用的是有道云笔记的编辑工具，可以边写变看效果。蛮好用的。可以在有道云笔记官网下载 二.markdown语法1.标题(h)在行首添加1-6个#号，对应标题的1到6阶，如： #. 这是 ##. 这是 ######. 这是 同时数字越大，标题字越小，","text":"一.书写工具我使用的是有道云笔记的编辑工具，可以边写变看效果。蛮好用的。可以在有道云笔记官网下载 二.markdown语法1.标题(h)在行首添加1-6个#号，对应标题的1到6阶，如： #. 这是 ##. 这是 ######. 这是 同时数字越大，标题字越小， 2.区块引用(blockquote)“&gt;” 表示块引用，类似邮件中引言，邮件中的引言是啥我也不懂..，另外在区块引用中其他的markdown语法也是可以使用的。效果如下： 区块引用1区块引用2 3.列表(li)无序列表可以使用 “*”、“+”、“-” 三种标签 red green blue 4.有序列表使用数字后面跟一个点，别忘了空格 red green blue 5.代码区块，顾名思义，代码区块就是为代码而准备的(code)，他可以保持代码的结构，语法很简单:使用三个点`(英文tab上面那个键) 将代码包起来,在三点后面指定代码类型。 1234如```java while(true)&#123; ...&#125; 6.分割符号语法：”—“ 或者 “*“ ，当然我还是推荐三减，方便！ 7.链接（a） 行内链接语法 “[baidu](www.baidu.com)”效果 baidu 参考链接 语法 “[名词][id]“然后在文章的任意部分定义该链接即可如[1]: “http://example.com/“ 8 换行需要两个空格加回车换行成功 9.强调效果：很重要可以看到字变为了斜体语法是使用两个“_”或者两个“*”将强调的内容包围起来。 10.小段行内代码效果：print(hello,world)语法：使用“`”（tab上面那个键） 11.图片效果：语法和链接的语法相似，只不过多了一个“!” 12.反斜杠可以将markdown语法关键字打印出来 三.结束第一篇博客写完哈哈哈","categories":[{"name":"hexo","slug":"hexo","permalink":"https://gongpipi.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://gongpipi.github.io/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"https://gongpipi.github.io/tags/markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-05T13:00:08.532Z","updated":"2017-06-24T12:57:26.055Z","comments":true,"path":"2017/05/05/hello-world/","link":"","permalink":"https://gongpipi.github.io/2017/05/05/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}